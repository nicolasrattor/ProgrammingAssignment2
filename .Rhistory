makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(5)
makeVector(5vffbf)
makeVector(55686)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<-makeVector(5)
cachemean(a)
a<-makeVector(5gwg)
a<-makeVector(5496997)
cachemean(a)
cachemean(b)
cachemean(m)
cachemean(a)
View(a)
makeVector(5496997)
a<-makeVector(NA)
cachemean(a)
a<-makeVector(NULL)
cachemean(a)
a<-makeVector(7)
cachemean(a)
mvec <- makeVector()
x <- 1:4
mvec$set(x)
mvec$get()
[1] 1 2 3 4
mvec$getmean()
NULL
mvec$setmean(3.4)
mvec$getmean()
3.4
View(mvec)
cachemean(a)
cachemean(mvec)
mvec <- makeVector()
x <- 1:4
mvec$set(x)
mvec$get()
[1] 1 2 3 4
mvec$getmean()
NULL
mvec$setmean(3.4)
mvec$getmean()
3.4
mvec <- makeVector()
x <- 1:4
mvec$set(x)
mvec$get()
[1] 1 2 3 4
mvec$getmean()
NULL
mvec$setmean(3.4)
mvec$getmean()
3.4
mvec <- makeVector()
x <- 1:4
mvec$set(x)
mvec$get()
mvec$getmean()
NULL
mvec$setmean(3.4)
mvec$getmean()
mvec <- makeVector()
x <- 1:4
mvec$set(x)
mvec$get()
mvec$getmean()
NULL
mvec$setmean(3.4)
mvec$getmean()
cachemean(a)
cachemean(mvec)
a<-makeVector(7:89)
cachemean(a)
cachemean(mvec)
a<-makeVector(7)
cachemean(a)
cachemean(mvec)
a<-makeVector(1:15)
View(a)
cachemean(a)
cachemean(mvec)
mvec <- makeVector()
x <- 1:4
mvec$set(x)
mvec$get()
mvec$getmean()
mvec$setmean(3.4)
mvec$getmean()
mvec <- makeVector()
x <- 1:8
mvec$set(x)
mvec$get()
mvec$getmean()
mvec$setmean(3.4)
mvec$getmean()
mvec <- makeVector()
x <- 1:8
mvec$set(x)
mvec$get()
mvec$getmean()
mvec$setmean()
mvec$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(a)
cachemean(mvec)
cachemean(a)
cachemean(mvec)
cachemean(a)
cachemean(mvec)
cachemean(a)
cachemean(mvec)
cachemean(a)
cachemean(mvec)
cachemean(a)
cachemean(mvec)
cachemean(a)
cachemean(mvec)
a<-makeVector(1:16)
cachemean(a)
cachemean(mvec)
cachemean(a)
cachemean(mvec)
x<-matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3)
x
x<-matrix(c(1:100),ncol=3,nrow=3)
x<-matrix(c(1:100),ncol=10,nrow=10)
x
solve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
}
makeCacheMatrix(x)
inverse(x)
t(x)
x
ina(A)
inv(A)
package("matlib")
library(matlib)
package("matlib")
install.packages("matlib")
library(matlib)
library(matlib)
x<-matrix(c(1:100),ncol=10,nrow=10)
x
inv(x)
inv(x)
x<-8
inv(x)
Inverse(x)
x<-matrix(c(1:100),ncol=10,nrow=10)
Inverse(x)
A <- matrix( c(5, 1, 0,
3,-1, 2,
4, 0,-1), nrow=3, byrow=TRUE)
A
det(A)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(A)
chacheSolve(A)
makeCacheMatrix(A)
chacheSolve(A)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(A)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
makeCacheMatrix(A)
chacheSolve(A)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
chacheSolve(A)
makeCacheMatrix(A)
chacheSolve(A)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(A)
B<-makeCacheMatrix(A)
cacheSolve(B)
makeCacheMatrix(A)
cacheSolve(B)
Inverse(A)
